---
/**
 * Reusable hero section for service pages.
 * Props:
 *  - bg: Background image URL
 *  - titleHTML: Headline HTML (can contain span with gradient)
 *  - subtitle: Secondary line (plain text)
 *  - primaryText: Text inside primary CTA button (opens estimate modal)
 *  - secondaryText: Text inside secondary CTA link
 *  - secondaryHref: Destination for secondary CTA link
 *  - trust: Optional array of { label: string } to override default trust indicators
 */
export interface TrustItem { label: string }

export interface Props {
  bg: string;
  titleHTML: string;
  subtitle: string;
  primaryText: string;
  secondaryText: string;
  secondaryHref: string;
  trust?: TrustItem[];
}

const {
  bg,
  titleHTML,
  subtitle,
  primaryText,
  secondaryText,
  secondaryHref,
  trust = [
    { label: '25+ Years Experience' },
    { label: 'Locally Owned & Operated' },
    { label: '100% Satisfaction Guaranteed' },
  ],
} = Astro.props as Props;
---

<section class="relative min-h-screen bg-cover bg-center bg-no-repeat flex items-center justify-center" style={`background-image: url('${bg}'); background-attachment: fixed;`}>
  <!-- Overlay -->
  <div class="absolute inset-0 bg-gradient-to-b from-black/60 via-black/40 to-black/70"></div>

  <!-- Content -->
  <div class="relative z-10 text-center text-white px-4 max-w-5xl mx-auto">
    <div class="space-y-6">
      <!-- Headline -->
      <h1
        class="text-4xl md:text-6xl lg:text-7xl font-bold leading-tight opacity-0"
        style="font-family: 'Playfair Display', serif; animation: fadeInUp 0.6s ease-out 0.2s forwards;"
        set:html={titleHTML}
      ></h1>

      <!-- Subheadline -->
      <p
        class="opacity-0 mt-4 text-xl md:text-2xl text-[#F2F2F2] font-medium"
        style="font-family: 'Inter', sans-serif; opacity: 0.85; letter-spacing: 0.02em; animation: fadeInRight 0.6s ease-out 0.4s forwards;"
      >
        {subtitle}
      </p>

      <!-- CTA Buttons -->
      <div class="mt-8 flex flex-col sm:flex-row gap-4 justify-center">
        <!-- Primary CTA -->
        <button
          class="group rounded-full px-8 py-4 text-lg md:text-xl font-bold uppercase text-[#0B254B] opacity-0 transition-all duration-300"
          data-estimate-button
          style="background: linear-gradient(to right, #D6B560, #F6E4A4, #D6B560); background-size: 200% 100%; animation: fadeInUp 0.6s ease-out 0.6s forwards;"
          onmouseover="this.style.backgroundPosition='100% 0'; this.style.transform='scale(1.05)'; this.style.boxShadow='0 4px 20px rgba(0,0,0,0.3)'"
          onmouseout="this.style.backgroundPosition='0% 0'; this.style.transform='scale(1)'; this.style.boxShadow='none'"
        >
          <span>{primaryText}</span>
          <svg
            class="w-5 h-5 ml-2 inline transition-transform duration-300 group-hover:translate-x-1"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3" />
          </svg>
        </button>

        <!-- Secondary CTA -->
        <a
          href={secondaryHref}
          class="group border-2 border-white text-white rounded-full px-8 py-4 text-lg md:text-xl flex items-center justify-center transition-all duration-500 opacity-0 hover:border-transparent hover:text-[#0B254B]"
          style="animation: fadeInUp 0.6s ease-out 0.8s forwards; background: transparent;"
          onmouseover="this.style.background='linear-gradient(to right, #D6B560, #F6E4A4)'; this.style.borderColor='transparent'"
          onmouseout="this.style.background='transparent'; this.style.borderColor='white'"
        >
          <span>{secondaryText}</span>
          <svg
            class="w-5 h-5 ml-2 transition-transform duration-300"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
            style="animation: bob 2s ease-in-out infinite;"
          >
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
          </svg>
        </a>
      </div>

      <!-- Trust Indicators -->
      <div class="mt-12 flex flex-col sm:flex-row gap-6 justify-center items-center text-white/80 text-sm opacity-0" style="animation: fadeInUp 0.6s ease-out 1s forwards;">
        {trust.map((item) => (
          <div class="flex items-center gap-2">
            <svg class="w-4 h-4 text-[#D6B560]" fill="currentColor" viewBox="0 0 20 20">
              <path
                fill-rule="evenodd"
                d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
              />
            </svg>
            <span>{item.label}</span>
          </div>
        ))}
      </div>
    </div>
  </div>

  <style>
    @keyframes fadeInUp {
      from { opacity: 0; transform: translateY(30px); }
      to { opacity: 1; transform: translateY(0); }
    }
    @keyframes fadeInRight {
      from { opacity: 0; transform: translateX(-30px); }
      to { opacity: 1; transform: translateX(0); }
    }
    @keyframes bob {
      0%, 100% { transform: translateY(0); }
      50% { transform: translateY(4px); }
    }
  </style>
</section>
