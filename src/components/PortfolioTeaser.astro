---
// PortfolioTeaser.astro: Responsive grid of work images categorized by directory
import fs from 'fs/promises';
import path from 'path';
import PortfolioTeaser from './PortfolioTeaser.tsx';

// Function to convert filesystem directory names to proper display names
const getCategoryDisplayName = (dirName) => {
  const nameMap = {
    'bathroom': 'Bathroom',
    'kitchen': 'Kitchen',
    'stairs': 'Staircases',
    'other stuff': 'Custom Projects'
  };
  
  // Use the mapped name or capitalize if not found
  return nameMap[dirName.toLowerCase()] || dirName.replace(/\b\w/g, l => l.toUpperCase());
};

// Build list of categories and their images - ONLY using the 4 specified folders
const picsDir = path.join(process.cwd(), 'public', 'pictures');
// Only include these 4 specific folders as seen in the UI
const allowedFolders = ['kitchen', 'bathroom', 'stairs', 'other stuff'];
let categories = [];
// Only process the allowed folders
for (const dir of allowedFolders) {
  const dirPath = path.join(picsDir, dir);
  
  try {
    const stat = await fs.stat(dirPath);
    if (!stat.isDirectory()) continue;
    
    const files = await fs.readdir(dirPath);
    const images = files
      .filter(name => /\.(jpe?g|png)$/i.test(name))
      .map(name => `/pictures/${dir}/${name}`);
      
    if (images.length) categories.push({ 
      name: getCategoryDisplayName(dir),
      originalDir: dir,
      images 
    });
  } catch (error) {
    console.warn(`Could not process folder ${dir}: ${error.message}`);
    // Continue with other folders if one isn't found
  }
}

// Sort categories in the same order as the UI shows them
categories = categories.sort((a, b) => {
  return allowedFolders.indexOf(a.originalDir) - allowedFolders.indexOf(b.originalDir);
});

// Store the final categories
const uniqueCategories = categories;

---
<PortfolioTeaser categories={uniqueCategories} client:load />
